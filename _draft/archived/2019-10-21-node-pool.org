* UML

#+begin_src plantuml :file ../../assets/node-pool-uml.png
  @startuml
  abstract class Deque
  Deferred "1" *-- "1" Promise
  Deque "1" *-- "1" DoublyLinkedList
  Deque <|-- Queue
  Queue "1" *-- "many" ResourceRequest
  Deferred <|-- ResourceRequest
  Deferred <|-- ResourceLoan
  ResourceLoan "1" *-- "1" PooledResource
  PriorityQueue "1" *-- "many" Queue: contains
  PooledResource "1" *-- "1" Resource
  Pool "1" *-- "1" PriorityQueue : hold requests
  Pool "1" *-- "many" ResourceLoan
  Deque <|-- PooledResourceDeque
  PooledResourceDeque "1" *-- "many" PooledResource
  Pool "1" *-- "1" PooledResourceDeque : hold PooledResource
  Pool "1" *-- "1" Factory : hold Factory
  Factory --> Resource : produce
  EventEmitter <|-- Pool
  class Queue {
  push()
  }
  class PooledResource {
  creationTime
  lastReturnTime
  lastBorrowTime
  lastIdleTime
  state
  obj : Resource
  }
  class Pool {
  - draining
  - started
  - factoryCreateOperations
  - factoryDestroyOperations
  - ensureMinimum()
  - despense()
  - createResource()
  - dispatchResource()
  - dispatchPooledResourceToNextWaitingClient()
  + start()
  + aquire()
  + use()
  }
  @enduml
#+end_src

#+RESULTS:
[[file:../../assets/node-pool-uml.png]]

* tricks
recursive setTimeout
#+begin_src javascript
      this._scheduledEviction = setTimeout(() => {
        this._evict();
        this._scheduleEvictorRun();
      }, this._config.evictionRunIntervalMillis);
#+end_src

mutual recursion
#+begin_src javascript
  class Pool{
    _dispense () {
      // ...
      this._createResource()
      // ...
    }
    _createResource() {
      // ...
      this._dispense()
      // ...
    }
  }
#+end_src

TODO Promise as attribute
#+begin_src javascript
class Deferred {
  constructor(Promise) {
    this._state = Deferred.PENDING;
    this._resolve = undefined;
    this._reject = undefined;

    this._promise = new Promise((resolve, reject) => {
      this._resolve = resolve;
      this._reject = reject;
    });
  }

  get state() {
    return this._state;
  }

  get promise() {
    return this._promise;
  }

  reject(reason) {
    if (this._state !== Deferred.PENDING) {
      return;
    }
    this._state = Deferred.REJECTED;
    this._reject(reason);
  }

  resolve(value) {
    if (this._state !== Deferred.PENDING) {
      return;
    }
    this._state = Deferred.FULFILLED;
    this._resolve(value);
  }
}
#+end_src

Deferred 灵活性
